Cho cặp số S và T là các số nguyên tố có 4 chữ số (Ví dụ S = 1033, T = 8197 là các số nguyên tố có 4 chữ số). Hãy viết chương trình tìm cách dịch chuyển S thành T thỏa mãn đồng thời những điều kiện dưới đây:

Mỗi phép dịch chuyển chỉ được phép thay đổi một chữ số của số ở bước trước đó (ví dụ nếu S=1033 thì phép dịch chuyển S thành 1733 là hợp lệ);
Số nhận được cũng là một số nguyên tố có 4 chữ số (ví dụ nếu S=1033 thì phép dịch chuyển S thành 1833 là không hợp lệ, và S dịch chuyển thành 1733 là hợp lệ);
Số các bước dịch chuyển là ít nhất.
Ví dụ số các phép dịch chuyển ít nhất để S = 1033 thành  T = 8179 là 6 bao gồm các phép dịch chuyển như sau:       

8179 ß 8779ß 3779ß 3739ß 3733ß 1733ß 1033.

Input:

Dòng đầu tiên đưa vào số lượng test T (T≤100)
Những dòng kế tiếp mỗi dòng đưa vào một test. Mỗi test là một bộ đôi S, T.
Output:

Đưa ra kết quả mỗi test theo từng dòng.
Ví dụ:

Input

Output

2

1033 8179

1033 8779

6

5

#include<bits/stdc++.h>
using namespace std;
const long limit = 2e5+5;
long long x,y,t;
int d[limit]={0};
vector<long long> a;
bool ok[limit];
int dem[limit];
vector<long long> ke[limit];
queue<long long> q;

void sang(){
	for (int i=2; i<=9999; i++){
		if (d[i]==0) 
		for (int j=i*i; j<=9999; j+=i) d[j]=1;
	}
	for (int i = 1000; i<=9999; i++){
		if (d[i]==0) a.push_back(i);
	}
}

bool check(long long x,long long y){
	int d=0;
	while (x&&y){
		if (x%10!=y%10) d++;
		x/=10; y/=10;
	}
	return d==1;
}

void khoitao(){
	for (int i = 0; i<a.size()-1; i++){
		for (int j = i+1; j<a.size(); j++){
			if (check(a[i],a[j])){
				ke[a[i]].push_back(a[j]);
				ke[a[j]].push_back(a[i]);
			}
		}
	}
}

int BFS (long long u, long long dich){
	q.push(u);
	dem[u]=0;
	while (q.size()){
		u=q.front();
		q.pop();
		ok[u]=true;
		if (u==dich) return dem[dich];
		for (int i = 0; i<ke[u].size(); i++){
			long long v=ke[u][i];
			if (ok[v]) continue;
			ok[v]=true;
			dem[v]=dem[u]+1;
			q.push(v);
		}
	}
}
int main (){
	sang();
	khoitao();
	cin>>t;
	while (t--){
		for (int i = 0; i<limit; i++){
			ok[i]=false;
			dem[i]=0;
		}
		while (q.size()>0) q.pop();
		cin>>x>>y;
		cout<<BFS(x,y);
		cout<<endl;
	}
	return 0;
}
