
Cho số tự nhiên N (N<10^9) và hai phép biến đổi (a), (b) dưới đây.

Thao tác (a): Trừ N đi 1 (N=N-1). Ví dụ N=17, thao tác (a) biến đổi N = N-1 =16.
Thao tác (b): N = max(u,v) nếu u*v =N (u>1, v>1). Ví dụ N=16, thao tác (b) có thể biến đổi N = max(2, 8)=8 hoặc N=max(4, 4)=4.
Chỉ được phép sử dụng hai thao tác (a) hoặc (b), hãy biến đổi N thành 1 sao số các thao tác (a), (b) được thực hiện ít nhất. Ví dụ với N=17, số các phép (a), (b) nhỏ nhất biến đổi N thành 1 là 4 bước như sau:

                                    Thao tác (a): N = N-1 = 17-1 = 16

                                    Thao tác (b): 16 = max(4,4) = 4

                                    Thao tác (b): 4 = max(2,2) = 2

                                    Thao tác (a): 2 = 2-1 = 1

Input:

Dòng đầu tiên ghi lại số tự nhiên T là số lượng Test;
T dòng kế tiếp mỗi dòng ghi lại một bộ Test. Mỗi test là một số N.
          Output:

Đưa ra kết quả mỗi test theo từng dòng.
Ví dụ:

 

Input

Output

3

17

50

100

4

5

5

#include<bits/stdc++.h>
using namespace std;
struct node{
	int val;
	int dem;
};
int xuly(int a){
	queue <node> q;
	set<int> s;
	s.insert(a);
	q.push({a,0});
	while (q.size()>0){
		node tmp = q.front();	
		q.pop();
		if(tmp.val==1) return tmp.dem;
		if(tmp.val-1==1) return tmp.dem+1;
		if (s.find(tmp.val-1)==s.end() && tmp.val-1>0){
			q.push({tmp.val-1,tmp.dem+1});
			s.insert(tmp.val-1);
		}
		for (int i = 2; i*i<=tmp.val; i++){
			if (tmp.val%i==0){
				if (s.find(tmp.val/i)==s.end()){
					q.push({tmp.val/i,tmp.dem+1});
					s.insert(tmp.val/i);
				}
			}
		}
	}
}
int main(){
	int t; cin>>t;
	while (t--){
		int a,b;
		cin>>a;
		cout<<xuly(a)<<endl;
	}
	return 0;
}
