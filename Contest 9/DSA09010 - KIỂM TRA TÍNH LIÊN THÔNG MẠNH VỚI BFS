Cho đồ thị có hướng G=<V, E> được biểu diễn dưới dạng danh sách cạnh. Sử dụng thuật toán BFS, hãy kiểm tra xem đồ thị có liên thông mạnh hay không?

Input:

Dòng đầu tiên đưa vào T là số lượng bộ test.
Những dòng tiếp theo đưa vào các bộ test. Mỗi bộ test gồm 2 dòng: dòng đầu tiên đưa vào hai số |V|, |E| tương ứng với số đỉnh và số cạnh; Dòng tiếp theo đưa vào các bộ đôi uÎV, vÎV tương ứng với một cạnh của đồ thị.
T, |V|, |E| thỏa mãn ràng buộc: 1≤T≤100; 1≤|V|≤103; 1≤|E|≤|V|(|V|-1)/2;
Output:

Đưa ra “YES”, hoặc “NO” theo từng dòng tương ứng với test là liên thông mạnh hoặc không liên thông mạnh.
      Ví dụ:

Input:

Output:

1

6 9 

1 2 2 4 3 1 3 2 3 5 4 3 5 4 5 6 6  3

YES

#include<bits/stdc++.h>
using namespace std;

vector<int> ke[1005];
bool ok[1005];

void BFS(int u){
	queue<int> q;
	q.push(u);
	while (q.size()>0)
	{
		int top = q.front(); q.pop();
		//cout<<top<<" ";
		ok[top] = true;
		for (int i = 0; i<ke[top].size(); i++){
			if (!ok[ke[top][i]])
			{
				ok[ke[top][i]]=true;
				q.push(ke[top][i]);
			}
		}
	}
}
int main(){
	int t;
	cin>>t;
	while (t--){
		for (int i = 0; i<1005; i++){
			ke[i].clear();
		}
		memset(ok,false,sizeof(ok));
		int a,b;
		cin>>a>>b;
		for (int i = 0; i<b; i++){
			int u, v;
			cin>>u>>v;
			ke[u].push_back(v);
			//ke[v].push_back(u);
		}
		int res = 0;
		for (int i = 1; i<=a; i++){
			if (!ok[i]){
				res++;
				BFS(i);
			}
		}
		if (res>=2) cout<<"NO"; else cout<<"YES";
		cout<<endl;
	}
	return 0;
}
