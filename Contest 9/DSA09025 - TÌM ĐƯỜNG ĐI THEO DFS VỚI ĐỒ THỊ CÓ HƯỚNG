Cho đồ thị có hướng G=<V, E> được biểu diễn dưới dạng danh sách cạnh. Hãy tìm đường đi từ đỉnh sÎV đến đỉnh tÎV trên đồ thị bằng thuật toán DFS.

Input:

Dòng đầu tiên đưa vào T là số lượng bộ test.
Những dòng tiếp theo đưa vào các bộ test. Mỗi bộ test gồm 2 dòng: dòng đầu tiên đưa vào bốn số |V|, |E|, sÎV, tÎV tương ứng với số đỉnh, số cạnh,  đỉnh u, đỉnh v; Dòng tiếp theo đưa vào các bộ đôi uÎV, vÎV tương ứng với một cạnh của đồ thị.
T, |V|, |E| thỏa mãn ràng buộc: 1≤T≤100; 1≤|V|≤103; 1≤|E|≤|V|(|V|-1)/2;
Output:

Đưa ra đường đi từ đỉnh s đến đỉnh t của mỗi test theo thuật toán DFS của mỗi test theo khuôn dạng của ví dụ dưới đây. Nếu không có đáp án, in ra -1.
      Ví dụ:

Input:

Output:

1

6  9  1  6

1 2 2 5 3 1 3 2 3 5 4 3 5 4 5 6 6 4

1 2 5 6

#include<bits/stdc++.h>
using namespace std;
vector<int> ke[1005];
bool ok[1005];
int truoc[1005];

void DFS(int u, int v){
	if (ok[v]) return;
	ok[u]=true;
	for (int i = 0; i<ke[u].size(); i++){
		if (!ok[ke[u][i]])
		{
			truoc[ke[u][i]]=u;
			DFS(ke[u][i],v);
		}
	}
}
void timkiem(int u, int v){
	if (!ok[v]){
		cout<<-1;
		return;
	}
	vector<int> a;
	while(u!=v){
		if (u==0){
			cout<<-1;
			return;
		}
		a.push_back(u);
		u = truoc[u];
	}
	a.push_back(v);
	reverse(a.begin(), a.end());
	for (int i = 0; i<a.size(); i++){
		cout<<a[i]<<" ";
	}
}
int main(){
	int t; cin>>t;
	while (t--){
		for (int i = 0; i<1005; i++){
			ke[i].clear();
		}
		memset(ok, false, sizeof(ok));
		memset(truoc,0, sizeof(truoc));
		int a,b, nguon, dich;
		cin>>a>>b>>nguon>>dich;
		for (int i = 0; i<b; i++){
			int u,v;
			cin>>u>>v;
			ke[u].push_back(v);
		}
		DFS(nguon,dich);
		timkiem(dich,nguon);
		cout<<endl;
	}
}
