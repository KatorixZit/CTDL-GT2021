Một đồ thị N đỉnh là một cây, nếu như nó có đúng N-1 cạnh và giữa 2 đỉnh bất kì, chỉ tồn tại duy nhất 1 đường đi giữa chúng.

Cho một đồ thị N đỉnh và N-1 cạnh, hãy kiểm tra đồ thị đã cho có phải là một cây hay không?

Input:

Dòng đầu tiên là số lượng bộ test T (T ≤ 20).
Mỗi test bắt đầu bởi số nguyên N (1 ≤ N ≤ 1000).
N-1 dòng tiếp theo, mỗi dòng gồm 2 số nguyên u, v cho biết có cạnh nối giữa đỉnh u và v.
Output: 

Với mỗi test, in ra “YES” nếu đồ thị đã cho là một cây, in ra “NO” trong trường hợp ngược lại.
Ví dụ:

 

 

 

Input

Output

2

4

1 2

1 3

2 4

4

1 2

1 3

2 3

 

YES

NO

#include<bits/stdc++.h>
using namespace std;
vector<int> ke[1005];
bool ok[1005];
bool cycle = false;
int a,b;
void DFS(int u, int t){
	ok[u]=true;
	for (int i = 0; i<ke[u].size(); i++){
		if (!ok[ke[u][i]])
			DFS(ke[u][i],u);
		else if (ke[u][i]!=t) cycle = true;
	}
}

bool solve(){
	cycle = false;
	for (int i = 1; i<=a; i++){
		memset(ok,false,sizeof(ok));
		DFS(i,0);
		if (cycle) return false;
		if (!ok[i]) return false;
	}
	return true;
}

int main(){
	int t;
	cin>>t;
	while (t--){
		for (int i = 0; i<1005; i++){
			ke[i].clear();
		}
		memset(ok,false,sizeof(ok));
		cin>>a;
		for (int i = 0; i<a-1; i++){
			int u, v;
			cin>>u>>v;
			ke[u].push_back(v);
			ke[v].push_back(u);
		}
		if (solve()) cout<<"YES"<<endl; else cout<<"NO"<<endl;
	}
	return 0;
}
 
