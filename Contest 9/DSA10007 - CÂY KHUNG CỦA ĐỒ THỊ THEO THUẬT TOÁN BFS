Cho đồ thị vô hướng G=(V, E). Hãy xây dựng một cây khung của đồ thị G với đỉnh u ∈ V là gốc của cây bằng thuật toán BFS.

Input

Dòng đầu tiên gồm một số nguyên T (1 ≤ T ≤ 20) là số lượng bộ test.

Tiếp theo là T bộ test, mỗi bộ test có dạng sau:

Dòng đầu tiên gồm 3 số nguyên N=|V|, M=|E|, u (1 ≤ N ≤ 103, 1 ≤ M ≤ 105, 1 ≤ u ≤ N).
M dòng tiếp theo, mỗi dòng gồm 2 số nguyên a, b (1 ≤ a, b ≤ N, a ≠ b) tương ứng cạnh nối hai chiều từ a tới b.
Dữ liệu đảm bảo giữa hai đỉnh chỉ tồn tại nhiều nhất một cạnh nối.
Output

Với mỗi bộ test, nếu tồn tại cây khung thì in ra N – 1 cạnh của cây khung với gốc là đỉnh u trên N – 1 dòng theo thứ tự duyệt của thuật toán BFS. Ngược lại nếu không tồn tại cây khung thì in ra -1.

Ví dụ

Input

Output

2

4 4 2

1 2

1 3

2 4

3 4

4 2 2

1 2

3 4

2 1

2 4

1 3

-1

#include<bits/stdc++.h>
using namespace std;
int n,m, u;
vector<int> ke[1005];
vector<pair<int, int> > caykhung;
bool chuaxet[1005];

void BFS (int u){
	queue<int> q; q.push(u);
	
	while (q.size()>0){
		int top = q.front(); q.pop();
		chuaxet[top]=false;
		for (int i = 0; i<ke[top].size();i++){
			int v = ke[top][i];
			if (chuaxet[v]){
				caykhung.push_back({top,v});
				q.push(v);
				chuaxet[v]=false;
			}
		}
	}
}

int main(){
	int t; cin>>t;
	while (t--){
		for (int i = 1; i<=1005; i++){
			ke[i].clear();
			caykhung.clear();
		}
		memset(chuaxet, true, sizeof(chuaxet));
		cin>>n>>m>>u;
		for (int i = 1; i<=m; i++){
			int x,y;
			cin>>x>>y;
			ke[x].push_back(y);
			ke[y].push_back(x);
		}
		BFS(u);
		if (caykhung.size()!=n-1) cout<< -1 << endl;
		else 
			for (int i = 0; i<caykhung.size(); i++){
				cout<<caykhung[i].first<<" "<<caykhung[i].second<<endl;
			}
	}
}
