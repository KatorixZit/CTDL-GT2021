Cho cây nhị phân, nhiệm vụ của bạn là duyệt cây theo xoắn ốc (spiral-order). Phép. Ví dụ với cây dưới đây sẽ cho ta kết quả của phép duyệt spiral-order: 1 2 3  4 5 6 7.

 

spiral_order

     Input:

Dòng đầu tiên đưa vào số lượng test T.
Những dòng tiếp theo đưa vào các bộ test. Mỗi bộ test gồm 2 dòng: dòng đầu tiên đưa vào số N là số lượng cạnh của cây; dòng tiếp theo đưa vào N bộ ba (u, v, x), trong đó u là node cha, v là node con, x= R nếu v là con phải, x=L nếu v là con trái; u, v, x được viết cách nhau một vài khoảng trống.
T, N, u, v, thỏa mãn ràng buộc: 1≤T≤100; 1≤N≤103; 1≤u, v≤104;
Output:

Đưa ra kết quả phép duyệt level-order theo từng dòng.
     Ví dụ:

Input

Output

2
2
1 2 R 1 3 L
4
10 20 L 10 30 R 20 40 L 20 60 R

1 3 2

10 0 30 60 40

#include<bits/stdc++.h>

using namespace std;

struct node{
	int data;
	node* l;
	node* r;
	node(int x){
		data=x;
		l=NULL;
		r=NULL;
	}
};

typedef node Node;

void themNode(Node* &t,int x,char c){
	if(c=='L') t->l=new Node(x);
	if(c=='R') t->r=new Node(x);
}

void taoTree(Node* &t,int a,int b,char c){
	if(t==NULL){
		return;
	}
	
	if(t->data==a) themNode(t,b,c);
	
	taoTree(t->l,a,b,c);
	taoTree(t->r,a,b,c);
}

void printSpiral(Node* root)
{
    if (root == NULL)
        return; // NULL check
  
    // Create two stacks to store alternate levels
    stack<Node*> s1; // For levels to be printed from right to left
    stack<Node*> s2; // For levels to be printed from left to right
  
    // Push first level to first stack 's1'
    s1.push(root);
  
    // Keep printing while any of the stacks has some nodes
    while (!s1.empty() || !s2.empty()) {
        // Print nodes of current level from s1 and push nodes of
        // next level to s2
        while (!s1.empty()) {
            Node* temp = s1.top();
            s1.pop();
            cout << temp->data << " ";
  
            // Note that is right is pushed before left
            if (temp->r)
                s2.push(temp->r);
            if (temp->l)
                s2.push(temp->l);
        }
        while (!s2.empty()) {
            Node* temp = s2.top();
            s2.pop();
            cout << temp->data << " ";
  
            // Note that is left is pushed before right
            if (temp->l)
                s1.push(temp->l);
            if (temp->r)
                s1.push(temp->r);
        }
    }
}

int main(){
	int t;
	cin>>t;
	while(t--){
		int n;
		cin>>n;
		Node* t=NULL;
		int a,d;
		char c;
		while(n--){
			cin>>a>>d>>c;
			if(t==NULL){
				t=new Node(a);
				themNode(t,d,c);
			}else taoTree(t,a,d,c);
		}
		printSpiral(t);
		cout<<endl;
	}
}
