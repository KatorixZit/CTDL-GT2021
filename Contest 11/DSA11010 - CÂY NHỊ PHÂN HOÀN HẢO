Cho cây nhị phân, nhiệm vụ của bạn là kiểm tra xem cây nhị phân có phải là một cây hoàn hảo hay không (perfect tree)? Một cây nhị phân được gọi là cây hoàn hảo nếu tất cả các node trung gian của nó đều có hai node con và tất cả các node lá đều có cùng một mức.

      Input:

Dòng đầu tiên đưa vào số lượng test T.
Những dòng tiếp theo đưa vào các bộ test. Mỗi bộ test gồm 2 dòng: dòng đầu tiên đưa vào số N là số lượng cạnh của cây; dòng tiếp theo đưa vào N bộ ba (u, v, x), trong đó u là node cha, v là node con, x= R nếu v là con phải, x=L nếu v là con trái; u, v, x được viết cách nhau một vài khoảng trống.
T, N, u, v, thỏa mãn ràng buộc: 1≤T≤100; 1≤N≤103; 1≤u, v≤104;
Output:

Đưa ra kết quả mỗi test theo từng dòng.
      Ví dụ:

Input

Output

3
6
10 20 L 10 30 R 20 40 L 20 50 R 30 60 L 30 70 R
2
18 15 L 18 30 R
5
1 2 L 2 4 R 1 3 R 3 5 L 3 6 R

Yes
Yes
No

#include<bits/stdc++.h>

using namespace std;

int n,a,b;
char c;
bool du;
struct node{
    node* l;
    node* r;
    int data;
    node(int num){
        l=r=NULL;
        data=num;
    }
};

typedef node Node;

void themNode(Node* &t,int b,char c){
	if(c=='L') t->l=new Node(b);
	if(c=='R') t->r=new Node(b);
}

void createTree(Node* &t, int a,int b,char c){
	if(t==NULL) return;
	
	if(t->data == a) themNode(t,b,c);
	
	createTree(t->l,a,b,c);
	createTree(t->r,a,b,c);	
}

bool levelorder(Node* &t){

    //neu root rong thi tra ve true 
    if(t==NULL) return true;

    Node* temp;
    queue<Node*> q;
    q.push(t);

    //bien dem so node la 
    int count=0;
    while(!q.empty()){

        //neu con not la va queue khong rong nghia la tat ca cac la khong dung bac
        if(count > 0) return false;

        int len=q.size();
        for(int i=0;i<len;i++){
            temp=q.front();    q.pop();
            //kiem tra node la 
            if(temp->l == NULL && temp->r==NULL) count++;

            //dua node con vao hang doi 
            else{
                if(temp->l) q.push(temp->l);
                if(temp->r) q.push(temp->r);
            }
         }

    }
    return true;
}

void duyetTrungGian(Node* &t){
    if(t==NULL  || du==false){
        return;
    }

    if ((t->l == NULL && t->r !=NULL) || (t->l != NULL && t->r == NULL)){
        du=false;
    }
    duyetTrungGian(t->l);
    duyetTrungGian(t->r); 
}

void check(Node* &t){
    bool kiemtra1=levelorder(t);
    duyetTrungGian(t);

    if(kiemtra1 && du) cout<<"Yes"<<endl;
    else cout<<"No"<<endl;
}

int main(){
    int t;
    cin>>t;
    while(t--){
        Node* t=NULL;
        du=true;
        cin>>n;
		while(n--){
			cin>>a>>b>>c;
			
			if(t==NULL) {
				t=new Node(a);
				themNode(t,b,c);
			}else createTree(t,a,b,c);	
		}
		
        check(t);
    }
}
