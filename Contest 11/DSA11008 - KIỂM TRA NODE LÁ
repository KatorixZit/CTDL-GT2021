Cho cây nhị phân, nhiệm vụ của bạn là kiểm tra xem tất cả các node lá của cây có cùng một mức hay không? Ví dụ với cây dưới đây sẽ cho ta kết quả là Yes.



      Input:

Dòng đầu tiên đưa vào số lượng test T.
Những dòng tiếp theo đưa vào các bộ test. Mỗi bộ test gồm 2 dòng: dòng đầu tiên đưa vào số N là số lượng cạnh của cây; dòng tiếp theo đưa vào N bộ ba (u, v, x), trong đó u là node cha, v là node con, x= R nếu v là con phải, x=L nếu v là con trái; u, v, x được viết cách nhau một vài khoảng trống.
T, N, u, v, thỏa mãn ràng buộc: 1≤T≤100; 1≤N≤103; 1≤u, v≤104;
Output:

Đưa ra kết quả mỗi test theo từng dòng.
      Ví dụ:

Input

Output

2

2
1 2 R 1 3 L
4
10 20 L 10 30 R 20 40 L 20 60 R

1
0

#include <iostream>
using namespace std;

struct node{
    int data;
    node* l;
    node* r;
    node(int x){
        data = x;
        l = NULL;
        r = NULL;
    }
};
typedef node NODE;
void noiNode(NODE* &t, int b, char c){
    if (c == 'L') {
        t->l = new NODE(b);
    }
    if (c == 'R') {
        t->r = new NODE(b);
    }
}

void taoTree(NODE* t, int a, int b, char c){
    if (t == NULL) {
        return;
    }
    if (t->data == a) {
        noiNode(t, b, c);
    }
    taoTree(t->l, a, b, c);
    taoTree(t->r, a, b, c);
}

bool theoMuc(NODE* t, int level, int* leafLevel){
    if (t == NULL) {
        return true;
    }
    if (t->l == NULL && t->r == NULL) {
        if (*leafLevel == 0) {
            *leafLevel = level;
        }
        return (*leafLevel == level);
    }
    return theoMuc(t->l, level+1, leafLevel) && theoMuc(t->r, level+1, leafLevel);
}

void hoanHao(NODE* t){
    int level = 0;
    int leafLevel = 0;
    bool ok = theoMuc(t, level, &leafLevel);
    if (ok) {
        cout<<1<<endl;
    }
    else{
        cout<<0<<endl;
    }
}

int main(){
    int t = 0;
    cin>>t;
    while (t--) {
        int n;
        cin>>n;
        NODE* t = NULL;
        while (n--) {
            int a,b;
            char c;
            cin>>a>>b>>c;
            if (t == NULL) {
                t = new NODE(a);
                noiNode(t, b, c);
            }
            else{
                taoTree(t, a, b, c);
            }
        }
        hoanHao(t);
    }
}
