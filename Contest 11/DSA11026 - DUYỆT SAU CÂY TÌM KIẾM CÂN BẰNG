Hãy xây dựng một cây nhị phân tìm kiếm cân bằng từ dãy số A[] =(a0, a1, .., an-1}. Đưa ra phép duyệt theo thứ tự sau (post-order) của cây tìm kiếm cân bằng.  Ví dụ với dãy A[]={40, 28, 45, 38, 33, 15, 25, 20, 23, 35, 30} ta sẽ có phép duyệt theo thứ tự trước của cây nhị phân tìm kiếm cân bằng với node gốc là 33 : 15, 23, 20, 30, 28, 25, 35, 38, 45, 40, 33.  

Input:

Dòng đầu tiên đưa vào số lượng bộ test T (T≤100).
Những dòng kế tiếp đưa vào T bộ test. Mỗi bộ test gồm 2 dòng: dòng thứ nhất là số tự nhiên N (N≤106). Dòng tiếp theo là N số của mảng A[].
Output:

Đưa ra kết quả mỗi test theo từng dòng.
Input:

Output

2

11

40  28  45 38  33  15  25  20  23  35  30

10

1  2  3  4  5  6  7  8  9  10

20 15 28 25 23 35 33 45 40 38 30

1 4 3 2 7 6 10 9 8 5

#include <bits/stdc++.h>
using namespace std;

struct Node{
    int data;
    Node *left, *right;
};

Node* newNode(int val){
    Node* temp = new Node;
    temp->data = val;
    temp->left = temp->right = NULL;
    return temp;
}

Node* createBST(int *a, int start, int end){
    if(start > end) return NULL;
    int mid = (start + end)/2;
    Node* temp = newNode(a[mid]);
    temp->left = createBST(a, start, mid - 1);
    temp->right = createBST(a, mid + 1, end);
    return temp;
}

void postOrder(Node* temp){
    if(temp){
        postOrder(temp->left);
        postOrder(temp->right);
        cout<<temp->data<<" ";
    }
}

main(){
    int t,n,i;
    cin>>t;
    while(t--){
        cin >> n;
        int a[n];
        for(i = 0; i < n; ++i) cin >> a[i];
        sort(a, a+n);
        Node *temp = createBST(a, 0, n - 1);
        postOrder(temp);
        cout << endl;
    }
}
