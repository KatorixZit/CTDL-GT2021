Hãy xây dựng một cây nhị phân tìm kiếm cân bằng từ dãy số A[] =(a0, a1, .., an-1}. Đếm số node lá của cây nhị phân tìm kiếm cân bằng.  Ví dụ với dãy A[]={40, 28, 45, 38, 33, 15, 25, 20, 23, 35, 30} ta sẽ có phép duyệt theo thứ tự trước của cây nhị phân tìm kiếm cân bằng với số node lá là 5 : 15, 23, 30, 35 45.

Input:

Dòng đầu tiên đưa vào số lượng bộ test T (T≤100).
Những dòng kế tiếp đưa vào T bộ test. Mỗi bộ test gồm 2 dòng: dòng thứ nhất là số tự nhiên N (N≤1000). Dòng tiếp theo là N số của mảng A[].
Output:

Đưa ra kết quả mỗi test theo từng dòng.
Input:

Output

2

11

40  28  45 38  33  15  25  20  23  35  30

10

1  2  3  4  5  6  7  8  9  10

4

4

#include <bits/stdc++.h>
using namespace std;

struct node{
    int data;
    node *l;
    node *r;
    node(int x){
    	data=x;
    	l=NULL;
    	r=NULL;
	}
};
typedef node Node;


Node* createBST(int *a, int start, int end){
    if(start > end) return NULL;
    int mid = (start + end)/2;
    Node* temp = new Node(a[mid]);
    temp->l = createBST(a, start, mid - 1);
    temp->r = createBST(a, mid + 1, end);
    return temp;
}

//void preorder(Node* temp){
//    if(temp){
//        cout << temp->data << " ";
//        preorder(temp->left);
//        preorder(temp->right);
//    }
//}

int getLeafCount(Node* t){
	if (t==NULL) return 0;
	if (t->l==NULL && t->r==NULL) return 1;
	else return getLeafCount(t->l)+getLeafCount(t->r);
}

main(){
    int t,n,i;
    cin>>t;
    while(t--){
        cin >> n;
        int a[n];
        for(i = 0; i < n; ++i) cin >> a[i];
        sort(a, a+n);
        Node *temp = createBST(a, 0, n - 1);
        cout<<getLeafCount(temp);
        cout << endl;
    }
}
