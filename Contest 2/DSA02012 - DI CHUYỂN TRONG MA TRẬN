Cho ma trận A[M][N]. Nhiệm vụ của bạn là đếm tất cả các đường đi từ phần tử A[0][0] đến phần tử A[M-1][N-1]. Bạn chỉ được phép dịch chuyển xuống dưới hoặc sang phải phần tử liền kề với vị trí hiện tại.

Input:

Dòng đầu tiên đưa vào số lượng bộ test T.
Những dòng kế tiếp đưa vào các bộ test. Mỗi bộ test gồm hai phần: phần thứ nhất là hai số M, N tương ứng với số hàng và số cột của ma trận; dòng tiếp theo đưa vào các phần tử của ma trận A[][]; các số được viết cách nhau một vài khoảng trống.
T, M, N, A[i][j] thỏa mãn ràng buộc: 1≤T ≤10; 1≤M, N, A[i][j]≤100.
Output:

Đưa ra số cách di chuyển của mỗi test theo từng dòng.
Giải thích test 1: Có 3 cách di chuyển là [1 4 5 6], [1 2 5 6] và [1 2 3 6].
 

Input

Output

2
2  3

1  2  3 

4  5  6
2  2

1  2 

3  4

3

2

#include <bits/stdc++.h>
using namespace std;
int m, n, d = 0;
int a[100][100];
void Init(){
	cin>>m>>n;
	for (int i = 1; i<=m; i++){
		for (int j = 1; j<=n; j++){
			cin>>a[i][j];
		}
	}
}
void Try(int x, int y, int n, int m, int &d) {
	if(x == m-1 && y == n-1)
		d++;
	if(x+1 < m && y < n) Try(x+1, y, n, m, d);
	if(x < m && y+1 < n) Try(x, y+1, n, m, d);
}

int main() {
	int t; cin >> t;
	while (t--){
		d=0;
		Init();
		Try(0, 0, n, m, d);
		cout << d << endl;
	}
		
}
