Cho một mê cung bao gồm các khối được biểu diễn như một ma trận nhị phân A[N][N]. Một con chuột đi từ ô đầu tiên góc trái (A[0][0]) đến ô cuối cùng góc phải (A[N-1][N-1]) theo nguyên tắc:

Down (D): Chuột được phép xuống dưới nếu ô dưới nó có giá trị 1.
Right (R): Chuột được phép sang phải dưới nếu ô bên phải nó có giá trị 1.
Hãy đưa ra một hành trình của con chuột trên mê cung. Đưa ra -1 nếu chuột không thể đi đến đích.

                        https://www.geeksforgeeks.org/wp-content/uploads/ratinmaze_filled_path1.png

Input:

Dòng đầu tiên đưa vào số lượng bộ test T.
Những dòng kế tiếp đưa vào các bộ test. Mỗi bộ test gồm hai phần: phần thứ nhất đưa vào số N là kích cỡ của mê cung; dòng tiếp theo đưa vào ma trận nhị phân A[N][N].
T, N, A[i][j] thỏa mãn ràng buộc: 1≤T ≤10; 2≤N≤10; 0≤A[i][j] ≤1.
Output:

Đưa ra tất cả đường đi của con chuột trong mê cung theo thứ tự từ điển. Đưa ra -1 nếu chuột không đi được đến đích.
Input

Output

2

4

1  0  0  0

1  1  0  1 

0  1  0  0 

1  1  1  1

5

1 0 0 0 0

1 1 1 1 1

1 1 0 0 1

0 1 1 1 1

0 0 0 1 1

DRDDRR

DDRDRRDR DDRDRRRD DRDDRRDR DRDDRRRD DRRRRDDD

#include <bits/stdc++.h>
using namespace std;

int n;
int a[101][101];
char c[1001];
bool printed = false;

void show(int k){
    for (int i = 0; i < k; i++) {
        cout<<c[i];
    }
    cout<<" ";
    printed = true;
}
void Try(int i, int j, int k){
    if (i == n && j == n) {
        show(k);
        return;
    }
    if (i + 1 <= n && a[i+1][j] == 1) {
        c[k] = 'D';
        Try(i+1, j,k+1);
    }
    if (j + 1 <= n && a[i][j+1] == 1) {
        c[k] = 'R';
        Try(i, j + 1,k+1);
    }
}
int main() {
    int t= 0;
    cin>>t;
    while (t--) {
        cin>>n;
        for (int i = 1; i<=n; i++) {
            for (int j = 1; j <= n; j++) {
                cin>>a[i][j];
            }
        }
        printed = false;
        if (a[1][1] != 1) {
            cout<<-1<<endl;
        }
        
        else{
            Try(1, 1,0);
            if (printed == false) {
                cout<<-1;
            }
            cout<<endl;
        }
    }
    return 0;
}
